<div id="idMSExcelImport" style="display: none">
    <input type="file" id="excelfiles" name="file" />
    <br />
    <br />
    <button title="Import" class="k-button" id="excelImport">
        Excel Import
    </button>
</div>

<script>

    function openMSExcelImportWindow() {
        dialogSaveAsSelectOpen();
    }

    function openMSExcelImportWindow_Second() {

        $("#idMSExcelImport").show().kendoWindow({
            width: "455px",
            height: "130px",
            //position: { top: 100, left: "20%" },
            modal: true,
            title: "MS Project Import"
        });

        $('#idMSExcelImport').data('kendoWindow').center().open();
        $('.k-window-content.k-content').css('background', '#D9D9D9');
        $('.ui-tabs-panel.ui-widget-content.ui-corner-bottom').css('background', '#D9D9D9');
        $('.ui-tabs-nav.ui-helper-reset.ui-helper-clearfix.ui-widget-header.ui-corner-all').css('background', '#3F51B5');
    }

    $("#excelImport").click(function () {
        var files = document.getElementById('excelfiles').files;
        if (!files.length) {
            alert('Please select a file!');
            return;
        }
        var file = files[0];
        var reader = new FileReader();
        // If we use onloadend, we need to check the readyState.
        reader.onloadend = function (evt) {
            //alert("Done");
            //debugger;
            if (evt.target.readyState == FileReader.DONE) { // DONE == 2
                var txt = evt.target.result;
                var parser = new DOMParser();

                // Getting all the task from xml file
                //var varTxt = txt.substring(txt.indexOf("<Tasks>"), txt.indexOf("</Tasks>") + 8);
                //var txtxtt = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + varTxt;

                var xml = parser.parseFromString(txt, "text/xml");
                initExcel(xml);
            }
        };

        var blob = file.slice(0, file.size);
        reader.readAsText(file);
    });

    function delete_null_properties(test, recurse) {
        for (var i in test) {
            if (test[i] === null || test[i] === "") {
                delete test[i];
            } else if (recurse && typeof test[i] === 'object') {
                delete_null_properties(test[i], recurse);
            }
        }
    }

    function initExcel(xml) {

        //var jj = xml.getElementsByTagName("Tasks")[0];

        var GetJsonDataFromXml = $.xml2json(xml);

        var newObjAfterRemoveNodes = delete_null_properties(GetJsonDataFromXml, true);

        var GetStringDataFromJson = JSON.stringify(GetJsonDataFromXml);

        $.ajax({
            type: "POST",
            dataType: 'json',
            data: {
                PrjKy: tempPrjKy,
                PrcsSchKy: tempPrcsSchKy,
                MSImportStringData: GetStringDataFromJson
            },
            url: urlSetMSExcelImportJsonData,
            converters:
            {
                "text json": function (data) {
                    return $.parseJSON(data, true, true);
                }
            },
            success: function (data) {
                $('#idMSExcelImport').data('kendoWindow').close();
                goDrillGrid(tempPrjKy, tempPrcsSchKy, 0);
                $.holdReady(false);
            }
        });

    }

</script>