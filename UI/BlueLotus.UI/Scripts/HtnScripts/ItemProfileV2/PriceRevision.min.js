function LoadGridWithColumnPropThree(e, t) { var a = new Date; if (3 == t) { try { $("#Pricegrid").data().kendoGrid.destroy(), $("#Pricegrid").empty() } catch (e) { } var i = $("#ItmKy").val(), l = new kendo.data.DataSource({ transport: { read: { url: urlLoadPriceRevision, dataType: "json" }, parameterMap: function (e, t) { if ("read" == t) return { ItmKy: i, ObjKy: viewBag.ObjKy } } }, batch: !0, pageSize: 12, schema: { model: { id: "ItmRateKy ", fields: { ItmKy: { editable: !1, nullable: !1, type: "number" }, ItmRateKy: { editable: !1, nullable: !1, type: "number" }, CosItmRateKy: { editable: !1, nullable: !1, type: "number" }, LocNm: { editable: !1, nullable: !1, type: "string" }, PreviousDate: { editable: !1, nullable: !0, type: "date" }, PreviousCosPri: { editable: !1, nullable: !1, type: "number" }, PreviousSlsPri: { editable: !1, nullable: !1, type: "number" }, ControlConKy: { editable: !1, nullable: !1, type: "number" }, isFixedSlsPri: { editable: !1, nullable: !1, type: "boolean" }, LocKy: { editable: !1, nullable: !1, type: "number" }, EftvDate: { editable: !0, nullable: !0, type: "date", defaultvalue: a }, CosPri: { editable: !0, nullable: !1, type: "number" }, Markup: { editable: !0, nullable: !1, type: "number" }, SlsPri: { editable: !0, nullable: !0, type: "number" } } } } }); $(".Pricegrid").kendoGrid({ dataSource: l, autobind: !0, resizable: !0, navigatable: !0, sortable: !0, reorderable: !0, save: function (e) { if (null == e.values.EftvDate) e.model.set("SlsPri", e.model.CosPri + e.values.Markup / 100 * e.model.CosPri) }, columns: e, selectable: "row", pageable: { refresh: !0, pageSizes: [5, 10, 20, 50, 100, 150] }, filterable: !0, dataBinding: function () { record = (this.dataSource.page() - 1) * this.dataSource.pageSize() }, dataBound: GridOnDataBound, editable: !0 }) } } function LoadPriceGrid() { setColumnProp([{ field: "ItmRateKy", title: "ItmRateKy", width: "70px", hidden: !0 }, { field: "CosItmRateKy", title: "CosItmRateKy", width: "70px", hidden: !0 }, { field: "ControlConKy", title: "ItmKy", width: "100px", hidden: !0, attributes: { style: "text-align:center;" } }, { field: "ItmKy", title: "ItmKy", width: "100px", hidden: !0, attributes: { style: "text-align:center;" } }, { field: "LocNm", title: "Location", width: "100px", attributes: { style: "text-align:center;", class: "non-editable" }, filterable: { operators: { string: { contains: "Contains", startswith: "Starts with", eq: "Is equal to", neq: "Is not equal to" } } }, editor: function (e, t) { var a = t.model; $('<input id="LocNm" name="' + t.field + '"/>').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("LocNm"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#LocNm").data("kendoComboBox"), i = t.value(); isNaN(i) ? (alert("'" + i + "' is not a Valid input"), t.value(""), a.set("CdKy", 1), a.set("LocNm", "")) : (a.set("CdKy", dataItem.CdKy), a.set("LocNm", dataItem.CdNm)) }, dataValueField: "CdKy", dataTextField: "CdNm" }) } }, { field: "LocKy", title: "LocKy", width: "80px", hidden: !0 }, { field: "PreviousCosPri", title: "Previous Cost Price", width: "100px", attributes: { style: "text-align:center;", class: "non-editable" }, template: '#= kendo.toString(PreviousCosPri, "n2")#' }, { field: "PreviousSlsPri", title: "Previous Sales Price", width: "100px", attributes: { style: "text-align:center;", class: "non-editable" }, template: '#= kendo.toString(PreviousSlsPri, "n2")#' }, { field: "PreviousDate", title: "Previous Date", width: "150px", attributes: { style: "text-align:center;", class: "non-editable" }, editor: function (e, t) { t.model; $('<input id="PreviousDate" name="' + t.field + '" data-value-field="' + t.field + '" data-bind="value:' + t.field + '" data-format="' + t.format + '"/>').appendTo(e).kendoDatePicker({ change: function (e) { } }) }, format: "{0: dd-MM-yyyy}" }, { field: "CosPri", title: "Cost Price", width: "100px", attributes: { style: "text-align:center;" }, template: '#= kendo.toString(CosPri, "n2")#' }, { field: "Markup", title: "Markup%", width: "100px", attributes: { style: "text-align:center;" } }, { field: "SlsPri", title: "Sales Price", width: "100px", attributes: { style: "text-align:center;" }, template: '#= kendo.toString(SlsPri, "n2")#' }, { field: "EftvDate", title: "Effective Date", width: "100px", editor: function (e, t) { t.model; $('<input id="EftvDatetxt" name="' + t.field + '" data-value-field="' + t.field + '" data-bind="value:' + t.field + '" data-format="' + t.format + '"/>').appendTo(e).kendoDatePicker({}) }, format: "{0: dd-MM-yyyy}" }], viewBag.ObjKy, "", "HdrSec2_Tab4_FormGrd", 3) } function GridOnDataBound(e) { var t = $("#Itemgrid").data("kendoGrid"); $(t.tbody).on("click", "td", function (e) { var a = $(this).closest("tr"); $("tr", t.tbody).index(a); if (6 == $("td", a).index(this)) { $("#MultiUnitWin").show().kendoWindow({ width: "1000px", height: "500px", modal: !0, title: "Find" }); var i = t.dataItem(t.select()), l = i.ItmKy, d = i.UnitKy; $("#MultiItmKy").val(l), $("#MultiUnitKy").val(d) } }) } function GridOnDataBinding(e) { record = (this.dataSource.page() - 1) * this.dataSource.pageSize() } function deleteme(e) { var t = e; confirm("Confirm to delete this record") && $.ajax({ url: '@Url.Content("~/ItmMas/DeleteItmMas")', dataType: "json", type: "POST", data: { key: t }, success: function (e) { $("#Itemgrid").data("kendoGrid").dataSource.read() }, error: function (e) { } }) }