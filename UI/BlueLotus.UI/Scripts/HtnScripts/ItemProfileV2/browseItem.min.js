var selectedRow, info = "", dtSource = null, ItmKey = ""; function CatDataSrcLoad(e) { return new kendo.data.DataSource({ transport: { read: { url: urlGetCat8ByCat7_SelectWeb, data: { Cat7Ky: e }, dataType: "json" } } }) } function ItemGridDefaultColumns() { setColumnProp([{ command: ["edit"], title: "&nbsp;", width: "75px" }, { field: "ItmTyp", title: "Item Type", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="ItmTypKy" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbTyp"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#ItmTypKy").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmTypKy", 1), a.set("ItmTyp", "")) : (a.set("ItmTyp", dataItem.CdNm), a.set("ItmTypKy", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "ItmCd", title: "ItemCode", width: "100px", attributes: { style: "text-align:center;" } }, { field: "ItmNm", title: "Item Name", width: "200px", filterable: { operators: { string: { contains: "Contains", startswith: "Starts with", eq: "Is equal to", neq: "Is not equal to" } } } }, { field: "ItmDisplayNm", title: "Display Name", width: "150px", filterable: { operators: { string: { contains: "Contains", startswith: "Starts with", eq: "Is equal to", neq: "Is not equal to" } } } }, { field: "EAN", title: "Barcode EAN", width: "100px", attributes: { style: "text-align:center;" } }, { field: "Cat7Cd", title: "Department", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="Dept" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbDept"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Dept").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmCat7Ky", 1), a.set("Cat7Cd", "")) : (a.set("Cat7Cd", dataItem.CdNm), a.set("ItmCat7Ky", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Cat8Cd", title: "Category", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model, d = a.ItmCat7Ky; d || (d = 1), $('<input id="Cat8Cd" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbCat"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Cat8Cd").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmCat8Ky", 1), a.set("Cat8Cd", "")) : (a.set("Cat8Cd", dataItem.CdNm), a.set("ItmCat8Ky", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Brand", title: "Brand", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="Brand" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbBrand"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Brand").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("BrandKy", 1), a.set("Brand", "")) : (a.set("Brand", dataItem.CdNm), a.set("BrandKy", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Vat", title: "Vat%", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="Vat" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbVat"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Vat").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmTaxCatKy", 1), a.set("Vat", "")) : (a.set("Vat", dataItem.CdNm), a.set("ItmTaxCatKy", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Unit", title: "Unit", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="cmbUnitKy" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: { type: "POST", transport: { read: { url: URLUnitCmbLoad } } }, change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#cmbUnitKy").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("UnitKy", 1), a.set("Unit", "")) : (a.set("UnitKy", dataItem.UnitKy), a.set("Unit", dataItem.Unit)) }, dataValueField: "UnitKy", dataTextField: "Unit", dataBound: function (e) { } }) } }, { field: "Image", title: "ImageUpload", width: "0px", filterable: !1, template: '<input name="Image" id="Image" type="file" />', editor: function (e, t) { var a = kendo.guid(); $("input[id='Image']").kendoUpload({ template: $('<input type="file" id="' + a + '" data-role="upload" data-async=\'{  saveUrl: "InsertFileswithpath/ItmPrfl","autoUpload":"false"}\' multiple="true" data-success="onSuccess"  name="Image" localization=\'{ select: "file..."}\' />').appendTo(e) }) } }, { field: "FileName", title: "FileName", width: "100px", hidden: !0, attributes: { style: "text-align:center;" } }, { field: "DeleteImage", title: "Clear Image", width: "120px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox" name="DeleteImage"  data-type="boolean"  data-bind="checked:DeleteImage" /> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }, { field: "isAct", title: "isActive", width: "80px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox"  name="isAct"  data-type="boolean"  data-bind="checked:isAct"/> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }, { field: "isAgeVarification", title: "Age Verification", width: "120px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox" name="isAgeVarification"  data-type="boolean"  data-bind="checked:isAgeVarification" /> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }, { field: "isAlwTrnRateChange", title: "Prompt Price", width: "110px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox" name="isAlwTrnRateChange"  data-type="boolean" data-bind="checked:isAlwTrnRateChange"/> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }], viewBag.ObjKy, "", "HdrSec2_Tab1_FrmGrd", 1) } function LoadItemGridView(e) { setColumnProp([{ command: ["edit"], title: "&nbsp;", width: "75px" }, { field: "ItmTyp", title: "Item Type", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="ItmTypKy" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbTyp"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#ItmTypKy").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmTypKy", 1), a.set("ItmTyp", "")) : (a.set("ItmTyp", dataItem.CdNm), a.set("ItmTypKy", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "ItmCd", title: "ItemCode", width: "100px", attributes: { style: "text-align:center;" } }, { field: "ItmNm", title: "Item Name", width: "200px", filterable: { operators: { string: { contains: "Contains", startswith: "Starts with", eq: "Is equal to", neq: "Is not equal to" } } } }, { field: "ItmDisplayNm", title: "Display Name", width: "150px", filterable: { operators: { string: { contains: "Contains", startswith: "Starts with", eq: "Is equal to", neq: "Is not equal to" } } } }, { field: "EAN", title: "Barcode EAN", width: "100px", attributes: { style: "text-align:center;" } }, { field: "Cat7Cd", title: "Department", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="Dept" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbDept"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Dept").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmCat7Ky", 1), a.set("Cat7Cd", "")) : (a.set("Cat7Cd", dataItem.CdNm), a.set("ItmCat7Ky", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Cat8Cd", title: "Category", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model, d = a.ItmCat7Ky; d || (d = 1), $('<input id="Cat8Cd" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbCat"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Cat8Cd").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmCat8Ky", 1), a.set("Cat8Cd", "")) : (a.set("Cat8Cd", dataItem.CdNm), a.set("ItmCat8Ky", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Brand", title: "Brand", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="Brand" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbBrand"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Brand").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("BrandKy", 1), a.set("Brand", "")) : (a.set("Brand", dataItem.CdNm), a.set("BrandKy", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Vat", title: "Vat%", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="Vat" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: CdNm_SelectMob_Datasource("HdrSec1_CmbVat"), change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#Vat").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("ItmTaxCatKy", 1), a.set("Vat", "")) : (a.set("Vat", dataItem.CdNm), a.set("ItmTaxCatKy", dataItem.CdKy)) }, dataValueField: "CdKy", dataTextField: "CdNm", dataBound: function (e) { } }) } }, { field: "Unit", title: "Unit", width: "100px", attributes: { style: "text-align:center;" }, editor: function (e, t) { var a = t.model; $('<input id="cmbUnitKy" name="' + t.field + '" />').appendTo(e).kendoComboBox({ dataSource: { type: "POST", transport: { read: { url: URLUnitCmbLoad } } }, change: function (e) { combo = e.sender, selectedItm = combo.select(), dataItem = combo.dataItem(selectedItm); var t = $("#cmbUnitKy").data("kendoComboBox"), d = t.value(); isNaN(d) ? (alert("'" + d + "' is not a Valid input"), t.value(""), a.set("UnitKy", 1), a.set("Unit", "")) : (a.set("UnitKy", dataItem.UnitKy), a.set("Unit", dataItem.Unit)) }, dataValueField: "UnitKy", dataTextField: "Unit", dataBound: function (e) { } }) } }, { field: "Image", title: "ImageUpload", width: "0px", filterable: !1, template: '<input name="Image" id="Image" type="file" />', editor: function (e, t) { var a = kendo.guid(); $("input[id='Image']").kendoUpload({ template: $('<input type="file" id="' + a + '" data-role="upload" data-async=\'{  saveUrl: "InsertFileswithpath/ItmPrfl","autoUpload":"false"}\' multiple="true" data-success="onSuccess"  name="Image" localization=\'{ select: "file..."}\' />').appendTo(e) }) } }, { field: "FileName", title: "FileName", width: "100px", hidden: !0, attributes: { style: "text-align:center;" } }, { field: "DeleteImage", title: "Clear Image", width: "120px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox" name="DeleteImage"  data-type="boolean"  data-bind="checked:DeleteImage" /> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }, { field: "isAct", title: "isActive", width: "80px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox"  name="isAct"  data-type="boolean"  data-bind="checked:isAct"/> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }, { field: "isAgeVarification", title: "Age Verification", width: "120px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox" name="isAgeVarification"  data-type="boolean"  data-bind="checked:isAgeVarification" /> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }, { field: "isAlwTrnRateChange", title: "Prompt Price", width: "110px", editor: function (e, t) { var a = kendo.guid(); $('<label class="lbl-switch"> <input id="' + a + '" type="checkbox" name="isAlwTrnRateChange"  data-type="boolean" data-bind="checked:isAlwTrnRateChange"/> <div> <span class="on">Yes</span> <span class="off">No</span> </div> <i></i> </label>').appendTo(e) } }], viewBag.ObjKy, "", "HdrSec2_Tab1_FrmGrd", 1) } function LoadGridData() { for (var e = [], t = 0, a = 1; 0 == t;) { var d = DatasourceFill(a, 1e3); d.read(); for (var l = 0; l < d.data().length; l++) e.push(d.data()[l]); d.data().length < 1e3 && (t = 1), a++ } return e } function DatasourceFill(e, t) { var a = $("#HdrSec1_CmbTyp_Cd").data("kendoComboBox").value(); "" != a && void 0 != a && null != a || (a = 1); var d = $("#HdrSec1_CmbDept_Cd").data("kendoComboBox").value(); "" != d && void 0 != d && null != d || (d = 1); var l = $("#HdrSec1_CmbTyp_Cd").data("kendoComboBox").text(), i = $("#HdrSec1_InptItmCd_Val").val(), n = $("#HdrSec1_InptItmNm_Val").val(), o = $("#HdrSec1_CmbCat_Cd").data("kendoComboBox").value(); "" != o && null != o || (o = 1); var r = 0; return $("#HdrSec1_AllItm_Val").is(":checked") && (r = 1), new kendo.data.DataSource({ transport: { read: { url: urlGetAllItemsWithDept, dataType: "json", type: "POST", async: !1 }, update: { url: urlUpdate, type: "PUT" }, create: { url: urlInsert, dataType: "json" }, parameterMap: function (l, s) { return "read" == s ? { ItmTypKy: a, Dept: d, Cat: o, ObjKy: viewBag.ObjKy, PageNo: e, PageSize: t, OnlyisAct: r, ItmCd: i, ItmNm: n } : "read" !== s && l.models ? { models: kendo.stringify(l.models) } : void 0 } }, batch: !0, schema: { model: { id: "ItmKy", fields: { ItmKy: { editable: !1, nullable: !1, type: "number" }, ItmCd: { editable: !0, nullable: !1, type: "string", validation: { required: !0 } }, ItmTypKy: { editable: !0, nullable: !1, type: "number", defaultValue: a }, ItmNm: { editable: !0, nullable: !1, type: "string", validation: { required: !0 } }, ItmDisplayNm: { editable: !0, nullable: !0, type: "string" }, PartNo: { editable: !1, nullable: !0 }, Unit: { editable: !0, nullable: !1, type: "string" }, UnitKy: { editable: !0, nullable: !1, type: "number" }, UsageUnit: { editable: !1, nullable: !0 }, UsageUnitKy: { editable: !1, nullable: !0 }, Units: { editable: !0, nullable: !0 }, ItmCat1Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat2Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat3Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat4Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat5Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat6Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat7Ky: { editable: !0, nullable: !1, type: "number" }, ItmCat8Ky: { editable: !0, nullable: !1, type: "number" }, ItmCat9Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat10Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat11Ky: { editable: !1, nullable: !0, type: "number" }, ItmCat12Ky: { editable: !1, nullable: !0, type: "number" }, Cat1Cd: { editable: !0, nullable: !0, type: "string" }, Cat2Cd: { editable: !0, nullable: !0, type: "string" }, Cat3Cd: { editable: !0, nullable: !0, type: "string" }, Cat4Cd: { editable: !0, nullable: !0, type: "string" }, Cat5Cd: { editable: !0, nullable: !0, type: "string" }, Cat6Cd: { editable: !0, nullable: !0, type: "string" }, Cat7Cd: { editable: !0, nullable: !0, type: "string" }, Cat8Cd: { editable: !0, nullable: !0, type: "string" }, Cat9Cd: { editable: !0, nullable: !0, type: "string" }, Cat10Cd: { editable: !0, nullable: !0, type: "string" }, Cat11Cd: { editable: !0, nullable: !0, type: "string" }, Cat12Cd: { editable: !0, nullable: !0, type: "string" }, ReOrdLvl: { editable: !1, nullable: !0, type: "number" }, ReOrdQty: { editable: !1, nullable: !0, type: "number" }, Brand: { editable: !0, nullable: !1, type: "string" }, BrandKy: { editable: !0, nullable: !1, type: "number" }, ItmKy: { editable: !1, nullable: !1, type: "number" }, LiNo: { editable: !1, nullable: !1, type: "string" }, isDiscontinued: { editable: !1, nullable: !1, type: "boolean" }, isAlwTrnRateChange: { editable: !0, nullable: !1, type: "boolean" }, isAlwZeroPrice: { editable: !1, nullable: !1, type: "boolean" }, isAgeVarification: { editable: !0, nullable: !1, type: "boolean" }, MinQty: { editable: !1, nullable: !1, type: "float" }, MaxQty: { editable: !1, nullable: !1, type: "float" }, isAct: { editable: !0, nullable: !1, type: "boolean", defaultValue: !0 }, EAN: { editable: !0, nullable: !1, type: "string" }, ItmTyp: { editable: !0, nullable: !1, type: "string", defaultValue: l }, Vat: { editable: !0, nullable: !1, type: "string" }, ItmTaxCatKy: { editable: !0, nullable: !1, type: "number", validation: { required: !0, min: 1 } }, ItmTaxKy: { editable: !1, nullable: !1, type: "number" }, Image: { editable: !0, nullable: !1, type: "string" }, FileName: { editable: !0, nullable: !1, type: "string" }, DeleteImage: { editable: !0, nullable: !1, type: "boolean", defaultValue: !1 } } } } }) } function LoadGridWithColumnProp(e, t) { $("#HdrSec1_CmbTyp_Cd").data("kendoComboBox").value(); $("#HdrSec1_AllItm_Val").is(":checked"); $("#Itemgrid").data().kendoGrid, $("#HdrSec1_CmbTyp_Cd").data("kendoComboBox").text(), $("#HdrSec1_InptItmCd_Val").val(); $("#imagePreview").css("background-image", "none"), $("#imagePreview").empty(), ItmKy = $("#ItmKy").val(1); var a = $("#HdrSec1_CmbDept_Cd").data("kendoComboBox").value(); "" != a && null != a || (a = 1); var d = $("#HdrSec1_CmbCat_Cd").data("kendoComboBox").value(); if ("" != d && null != d || (d = 1), 1 == t) { try { $("#Itemgrid").data().kendoGrid.destroy(), $("#Itemgrid").empty() } catch (e) { } var l = LoadGridData(); $("#Itemgrid").kendoGrid({ dataSource: l, autobind: !0, resizable: !0, navigatable: !0, sortable: !0, reorderable: !0, scrollable: { virtual: !0 }, selectable: "row", pageable: { pageSize: 10, refresh: !0, pageSizes: [5, 10, 20, 50, 100, 150] }, columnMenu: !0, filterable: !0, columns: e, dataBound: function () { }, dataBinding: function () { record = (this.dataSource.page() - 1) * this.dataSource.pageSize() }, edit: function (e) { $("[name='ItmCd']", e.container).blur(function () { checkItmCdExist() }), $("[name='Image']", e.container).click(function () { }) }, dataBound: function (e) { $("input[id='Image']").kendoUpload({ async: { saveUrl: "InsertFileswithpath/ItmPrfl", autoUpload: !0 }, success: onSuccess, showFileList: !1, localization: { select: "file..." } }) }, editable: "popup", save: function (e) { for (var t = $("#Itemgrid").data("kendoGrid").dataSource.data(), a = [], d = [], l = 0; l < t.length; l++) t[l].isNew ? t[l].dirty && (a.push(t[l].toJSON()), t[l].dirty = !1) : d.push(t[l].toJSON()); $.ajax({ url: urlInsert, dataType: "json", type: "POST", data: JSON.stringify({ NewGridDetail: kendo.stringify(d), updateGrid: kendo.stringify(a) }), contentType: "application/json; charset=utf-8", success: function (e) { 1 == e ? (alert("Saved Successfully"), $("#Itemgrid").data("kendoGrid").refresh()) : alert("Record Not Saved") }, error: function (e) { return !1 } }) } }).on("click", "tbody tr", function (e) { for (var t = $(e.currentTarget), a = t[0].cellIndex, d = $("#Itemgrid").data("kendoGrid"), l = (d.columns[a], d.dataItem(t.closest("tr"))), i = d.dataSource.data(), n = 0; n < i.length; n++) i[n].ItmKy == l.ItmKy && (FormGlblData.gridIndex = n) }), $("#Itemgrid").find(".k-hierarchy-cell, .k-hierarchy-col").hide() } } function onSuccess(e) { if ("upload" == e.operation) { var t = e.response.fileName; $("#Itemgrid").data().kendoGrid.dataSource.data()[FormGlblData.gridIndex].set("FileName", t) } } function getFileInfo(e) { return $.map(e.files, function (e) { return info = e.name }).join(", ") } function dataBound(e) { var t = this; this.tbody.find("input[name=files]").kendoUpload({ multiple: !1, async: { saveUrl: "url" }, upload: function (e) { var a = t.dataItem(this.element.closest("tr")); e.data = { id: a.id } }, success: function (e) { var a = e.response.FileName, d = t.dataItem(this.element.closest("tr")); d.FileName = a, d.dirty = !0 } }) } function getItmKy() { var e = (t = $("#Itemgrid").data().kendoGrid).dataItem(t.select()); t.select(); try { e.ItmKy } catch (a) { var t; e = (t = $("#Itemgrid").data("kendoGrid")).dataItem(t.tbody.find(">tr:first")); e.ItmKy } } function checkItmCdExist() { var e = (d = $("#Itemgrid").data().kendoGrid).dataItem(d.select()), t = "", a = ""; try { t = e.ItmCd, a = e.ItmTypKy } catch (l) { var d; e = (d = $("#Itemgrid").data("kendoGrid")).dataItem(d.tbody.find(">tr:first")); t = e.ItmCd, a = e.ItmTypKy } "" == a && (a = ItmTypKy), $.ajax({ url: URLCheckItmCdExist, data: { Itmcd: t, Itmtypky: a }, dataType: "Json", type: "POST", success: function (e) { 1 == e && alert("Item code already exist") } }) } function ItmSettingsTab() { var e = $(".tabstrip").kendoTabStrip().data("kendoTabStrip"); ItmKy = $("#ItmKy").val(); ItmKy <= 1 && (e.disable(e.tabGroup.children().eq(1)), e.disable(e.tabGroup.children().eq(2)), e.disable(e.tabGroup.children().eq(3)), e.disable(e.tabGroup.children().eq(4)), e.disable(e.tabGroup.children().eq(5))) }